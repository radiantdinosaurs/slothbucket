#!/usr/bin/env node

const app = require('../app')
const debug = require('debug')('ui:server')
const http = require('http')
const port = normalizePort(process.env.PORT || '3000')
const server = http.createServer(app)
const winston = require('winston')
const logger = new (winston.Logger)({
    transports: [
        new (winston.transports.Console)({
            level: 'info',
            colorize: true,
            timestamp: true,
            silent: false
        }, {
            level: 'warn',
            colorize: true,
            timestamp: true,
            silent: false
        }, {
            level: 'error',
            colorize: true,
            timestamp: true,
            silent: false
        })
    ]
})

// listen on provided port, on all network interfaces
app.set('port', port)
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

// normalize a port into a number, string, or false
function normalizePort(val) {
    const port = parseInt(val, 10)
    if (isNaN(port)) return val
    if (port >= 0) return port
    return false
}

// event listener for HTTP server "error" event
function onError(error) {
    if (error.syscall !== 'listen') throw error
    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port
    if (error.code === 'EACCES') {
        logger.log('error', bind + ' requires elevated privileges')
        process.exit(1)
    } else if (error.code === 'EADDRINUSE') {
        logger.log('error', bind + ' is already in use')
        process.exit(1)
    } else throw error
}

// event listener for HTTP server "listening" event
function onListening() {
    const addr = server.address()
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    debug('Listening on ' + bind)
}
