'use strict'

const chai = require('chai')
const proxyquire = require('proxyquire')
const expect = chai.expect

// mocked dependencies
const base64 = {
    jpeg: '',
    png: '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'
}
const mockReturnError = {
    invalidArgumentError: function() {
        return new Error('invalid argument error')
    },
    internalError: function() {
        return new Error('internal error')
    },
    invalidFileFormat: function() {
        return new Error('invalid file format')
    }
}
const mockFs = {
    writeFile: () => Promise.resolve()
}
const mockUuid = {
    v4: () => {
        return 'uuid'
    }
}
const mockPngToJpeg = () => {
    return () => Promise.resolve()
}

const writeFile = proxyquire('./write-file', {
    '../error/return-error': mockReturnError,
    'fs': mockFs,
    'uuid': mockUuid,
    'png-to-jpeg': mockPngToJpeg
})

describe('write_file', () => {
    describe('handleWriteFileRequest', () => {
        it('checks that base64 is present', (done) => {
            writeFile.writeFileToDisk(undefined)
                .then(() => {
                    done(new Error('Writing file should not have been successful'))
                })
                .catch((error) => {
                    expect(error).to.be.an.instanceOf(Error).which.has.property('message', 'invalid argument error')
                    done()
                })
        })
        it('checks that base64 is a string', (done) => {
            writeFile.writeFileToDisk(2)
                .then(() => {
                    done(new Error('Writing file should not have been successful'))
                })
                .catch((error) => {
                    expect(error).to.be.an.instanceOf(Error).which.has.property('message', 'invalid argument error')
                    done()
                })
        })
        it('checks that base64 is valid file format', (done) => {
            writeFile.writeFileToDisk('test')
                .then(() => {
                    done(new Error('Writing file should not have been successful'))
                })
                .catch((error) => {
                    expect(error).to.be.an.instanceOf(Error).which.has.property('message', 'invalid file format')
                    done()
                })
        })
        it('checks that base64 is a valid JPEG', (done) => {
            writeFile.writeFileToDisk(base64.jpeg)
                .then((result) => {
                    expect(result).to.have.string('uuid.jpeg')
                    done()
                })
                .catch((error) => {
                    done(error)
                })
        })
        it('checks that base64 is a valid PNG', (done) => {
            writeFile.writeFileToDisk(base64.png)
                .then((result) => {
                    expect(result).to.have.string('uuid.jpeg')
                    done()
                })
                .catch((error) => {
                    done(error)
                })
        })
    })
})
